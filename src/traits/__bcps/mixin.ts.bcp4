import { GenericAbstractClass } from '../misc/generic-abstract-class.js';
import { TupleToIntersection } from '../misc/tuple-to-intersection.js';

export type Instance = any;

export interface MixinOptions {
  readonly baseClass?: GenericAbstractClass | undefined;
  readonly implementations?: readonly Instance[] | undefined;
  readonly staticImplementations?: readonly Instance[] | undefined;
}

export type InferMixinInputOptionsBaseClass<GOptions extends MixinOptions> =
  GOptions['baseClass'] extends undefined
    ? {}
    : {
        readonly baseClass: GOptions['baseClass'];
      };

export type InferMixinInputOptionsImplementations<GOptions extends MixinOptions> =
  GOptions['implementations'] extends undefined
    ? {}
    : {
        readonly implementations: {
          [GKey in keyof GOptions['implementations'] as GKey extends keyof []
            ? never
            : GKey]: abstract new (...args: any) => GOptions['implementations'][GKey];
        } & {
          [GKey in keyof GOptions['implementations'] as GKey extends 'length'
            ? GKey
            : never]: GOptions['implementations'][GKey];
        };
      };

export type InferMixinInputOptionsStaticImplementations<GOptions extends MixinOptions> =
  GOptions['staticImplementations'] extends undefined
    ? {}
    : {
        readonly implementations: {
          [GKey in keyof GOptions['staticImplementations'] as GKey extends keyof []
            ? never
            : GKey]: abstract new (...args: any) => GOptions['staticImplementations'][GKey];
        } & {
          [GKey in keyof GOptions['staticImplementations'] as GKey extends 'length'
            ? GKey
            : never]: GOptions['staticImplementations'][GKey];
        };
      };

export type InferMixinInputOptions<GOptions extends MixinOptions> =
  InferMixinInputOptionsBaseClass<GOptions> &
    InferMixinInputOptionsImplementations<GOptions> &
    InferMixinInputOptionsStaticImplementations<GOptions>;

/*--*/

export type InferMixinInstance<GOptions extends MixinOptions> = Omit<
  GOptions['implementations'] extends undefined
    ? unknown
    : GOptions['implementations'] extends readonly Instance[]
      ? TupleToIntersection<GOptions['implementations']>
      : never,
  'new'
>;

export type InferMixinStatic<GOptions extends MixinOptions> = Omit<
  GOptions['staticImplementations'] extends undefined
    ? GOptions['baseClass']
    : GOptions['staticImplementations'] extends readonly Instance[]
      ? GOptions['baseClass'] & TupleToIntersection<GOptions['staticImplementations']>
      : never,
  'new'
>;

export type InferMixinConstructor<GOptions extends MixinOptions> =
  GOptions['baseClass'] extends undefined
    ? {
        new (): InferMixinInstance<GOptions>;
      }
    : {
        new (...args: GParameters): GInstance & MixImplementations<GImplementations>;
      };

// export type InferMixinResult<GOptions extends MixinOptions> =
//   GOptions['baseClass'] extends undefined
//      ? Omit<GBaseClass, 'new'>

// export type MixImplementations<GImplementations extends readonly any[]> =
//   TupleToIntersection<GImplementations>;
//
// export type MixinImplementations<GImplementations extends readonly any[]> = {
//   [GKey in keyof GImplementations]: abstract new () => GImplementations[GKey];
// };
//
// export type MixAndExtendResult<
//   GBaseClass extends GenericAbstractClass | undefined,
//   GImplementations extends readonly any[],
// > = GBaseClass extends abstract new (...args: infer GParameters) => infer GInstance
//   ? Omit<GBaseClass, 'new'> & {
//   new (...args: GParameters): GInstance & MixImplementations<GImplementations>;
// }
//   : {
//     new (): MixImplementations<GImplementations>;
//   };

/*--*/

// TODO

export function mixin<GOptions extends MixinOptions>(
  options: InferMixinInputOptions<GOptions>,
): InferMixinResult<GOptions> {
  const _class: any = baseClass === void 0 ? class {} : class extends baseClass {};

  for (let i: number = 0; i < implementations.length; i++) {
    Object.defineProperties(
      _class.prototype,
      Object.getOwnPropertyDescriptors(implementations[i].prototype),
    );
  }

  return _class;
}

class A<T> {
  a: T;
  constructor(a: T) {
    this.a = a;
  }
}

class B<T> {
  b!: string;
  b_0!: T;
}

class C {
  static c(): string {
    return '';
  }
  c!: number;
}

class D extends C {
  static c(): string {
    return super.c();
  }

  d!: number;
}

// type Opt = {
//   baseClass: typeof A;
//   implementations: [typeof B, typeof C];
// };

type Opt<T> = {
  baseClass: typeof A;
  implementations: readonly [B<T>, C];
};

type I = InferMixinInputOptions<Opt<number>>;

const a = mixin<Opt<number>>({
  baseClass: A,
  implementations: [B, C],
});

// // type IMixed = new <T>(...args: ConstructorParameters<typeof A>) => A<T>;
// type IMixed = typeof A;
// const abc: IMixed = null as any;
// const z = new abc<number>('a');

class Mixed<T> extends mixin<Opt<string>>({
  baseClass: A,
  implementations: [B, C],
}) {
  constructor() {
    super();
  }
}

const b = mixin({
  baseClass: A,
  implementations: [B, C],
});
